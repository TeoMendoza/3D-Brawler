// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.0 (commit cc4a165627f041ba50c7554361a549373876a90d).

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void HandleStateChangeHandler(ReducerEventContext ctx, PlayerState oldPlayerState, PlayerState newPlayerState);
        public event HandleStateChangeHandler? OnHandleStateChange;

        public void HandleStateChange(PlayerState oldPlayerState, PlayerState newPlayerState)
        {
            conn.InternalCallReducer(new Reducer.HandleStateChange(oldPlayerState, newPlayerState), this.SetCallReducerFlags.HandleStateChangeFlags);
        }

        public bool InvokeHandleStateChange(ReducerEventContext ctx, Reducer.HandleStateChange args)
        {
            if (OnHandleStateChange == null)
            {
                if (InternalOnUnhandledReducerError != null)
                {
                    switch (ctx.Event.Status)
                    {
                        case Status.Failed(var reason): InternalOnUnhandledReducerError(ctx, new Exception(reason)); break;
                        case Status.OutOfEnergy(var _): InternalOnUnhandledReducerError(ctx, new Exception("out of energy")); break;
                    }
                }
                return false;
            }
            OnHandleStateChange(
                ctx,
                args.OldPlayerState,
                args.NewPlayerState
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class HandleStateChange : Reducer, IReducerArgs
        {
            [DataMember(Name = "oldPlayerState")]
            public PlayerState OldPlayerState;
            [DataMember(Name = "newPlayerState")]
            public PlayerState NewPlayerState;

            public HandleStateChange(
                PlayerState OldPlayerState,
                PlayerState NewPlayerState
            )
            {
                this.OldPlayerState = OldPlayerState;
                this.NewPlayerState = NewPlayerState;
            }

            public HandleStateChange()
            {
            }

            string IReducerArgs.ReducerName => "HandleStateChange";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags HandleStateChangeFlags;
        public void HandleStateChange(CallReducerFlags flags) => HandleStateChangeFlags = flags;
    }
}
